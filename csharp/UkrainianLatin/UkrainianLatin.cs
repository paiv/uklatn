/* Generated by gentables.py, do not edit. */

namespace paiv.uklatn;

using System.Text;
using System.Text.RegularExpressions;

/// <summary>
/// Ukrainian Cyrillic transliteration to and from Latin script.
/// </summary>
public sealed class UkrainianLatin {

    /// Transliteration system
    public enum Table {

        /// <summary>DSTU 9112:2021 System A</summary>
        DSTU_9112_A = 1,

        /// <summary>DSTU 9112:2021 System B</summary>
        DSTU_9112_B = 2,

        /// <summary>KMU 55:2010, not reversible</summary>
        KMU_55 = 3,
    }

    /// <summary>
    /// Transliterates a string of Ukrainian Cyrillic to Latin script.
    /// </summary>
    /// <param name="text">The text to transliterate.</param>
    /// <param name="table">The transliteration system.</param>
    /// <returns>The transliterated text.</returns>
    public string Encode(string text, Table table = Table.DSTU_9112_A) {
        _UKLatnTransformer? ntr = null;
        int ti = (int) table;
        if (ti >= 0 && ti < _UklatnTables.Length) {
            ntr = _UklatnTables[ti][0];
        }
        if (ntr is _UKLatnTransformer tr) {
            return tr.Transform(text);
        }
        throw new ArgumentException(String.Format("invalid table {0}", table), "table");
    }

    /// <summary>
    /// Re-transliterates a string of Ukrainian Latin to Cyrillic script.
    /// </summary>
    /// <param name="text">The text to transliterate.</param>
    /// <param name="table">The transliteration system.</param>
    /// <returns>The transliterated text.</returns>
    public string Decode(string text, Table table = Table.DSTU_9112_A) {
        _UKLatnTransformer? ntr = null;
        int ti = (int) table;
        if (ti >= 0 && ti < _UklatnTables.Length) {
            ntr = _UklatnTables[ti][1];
        }
        if (ntr is _UKLatnTransformer tr) {
            return tr.Transform(text);
        }
        throw new ArgumentException(String.Format("invalid table {0}", table), "table");
    }

    private interface _UKLatnTransformer {
        string Transform(string text);
    }

    private sealed class _Uklatn_uk_uk_Latn_DSTU_9112_A : _UKLatnTransformer {
        private Regex _rx1;
        private MatchEvaluator _tr1;

        internal _Uklatn_uk_uk_Latn_DSTU_9112_A() {
            this._rx1 = new Regex(@"\b([Ьь])|([Ьь](?=[АаЕеУу])|[ЄЮЯ](?=\u0301?[а-щьюяєіїґ’])|(?<=[Б-ДЖЗК-НП-ТФ-Щб-джзк-нп-тф-щҐґ])[Йй])|([ЁЄІЇЎА-яёєіїўҐґ’])",
                RegexOptions.Compiled | RegexOptions.CultureInvariant);
            var _maps1 = new List<Dictionary<string,string>> {
                new Dictionary<string,string> {
                    {"Ь","Ĵ"},{"ь","ĵ"}
                },
                new Dictionary<string,string> {
                    {"Ь","J'"},{"ь","j'"},{"Є","Je"},{"Ю","Ju"},{"Я","Ja"},{"Й","'J"},{"й","'j"}
                },
                new Dictionary<string,string> {
                    {"А","A"},{"а","a"},{"Б","B"},{"б","b"},{"В","V"},{"в","v"},{"Г","Ğ"},{"г","ğ"},{"Ґ","G"},{"ґ","g"},{"Д","D"},{"д","d"},{"Е","E"},{"е","e"},{"Є","JE"},{"є","je"},{"Ж","Ž"},{"ж","ž"},{"З","Z"},{"з","z"},{"И","Y"},{"и","y"},{"І","I"},{"і","i"},{"Ї","Ï"},{"ї","ï"},{"К","K"},{"к","k"},{"Л","L"},{"л","l"},{"М","M"},{"м","m"},{"Н","N"},{"н","n"},{"О","O"},{"о","o"},{"П","P"},{"п","p"},{"Р","R"},{"р","r"},{"С","S"},{"с","s"},{"Т","T"},{"т","t"},{"У","U"},{"у","u"},{"Ф","F"},{"ф","f"},{"Х","X"},{"х","x"},{"Ц","C"},{"ц","c"},{"Ч","Č"},{"ч","č"},{"Ш","Š"},{"ш","š"},{"Щ","Ŝ"},{"щ","ŝ"},{"Ю","JU"},{"ю","ju"},{"Я","JA"},{"я","ja"},{"Ь","J"},{"ь","j"},{"Й","J"},{"й","j"},{"’","'"},{"Ё","Ö"},{"ё","ö"},{"Ў","Ŭ"},{"ў","ŭ"},{"Ъ","Ǒ"},{"ъ","ǒ"},{"Ы","Ȳ"},{"ы","ȳ"},{"Э","Ē"},{"э","ē"}
                }
            };
            this._tr1 = (Match match) => {
                for (int i = match.Groups.Count; i > 0; i -= 1) {
                    Group group = match.Groups[i];
                    if (!group.Success) { continue; }
                    string key = group.Value;
                    if (_maps1[i-1].TryGetValue(key, out string? value)) {
                        return value;
                    }
                    return key;
                }
                return match.Groups[0].Value;
            };
        }

        public string Transform(string text) {
            text = text.Normalize(NormalizationForm.FormC);
            text = this._rx1.Replace(text, this._tr1);
            text = text.Normalize(NormalizationForm.FormC);
            return text;
        }
    }

    private sealed class _Uklatn_uk_uk_Latn_DSTU_9112_B : _UKLatnTransformer {
        private Regex _rx1;
        private MatchEvaluator _tr1;

        internal _Uklatn_uk_uk_Latn_DSTU_9112_B() {
            this._rx1 = new Regex(@"([Ьь](?=[АаЕеІіУу])|(?<=[Б-ДЖЗК-НП-ТФ-Щб-джзк-нп-тф-щҐґ])[Йй])|([ГЄЖЇХЩШЧЮЯЁЎЪЫЭ](?=\u0301?[а-яёєіїўґ’])|\b[Ьь])|([ЁЄІЇЎА-яёєіїўҐґ’])",
                RegexOptions.Compiled | RegexOptions.CultureInvariant);
            var _maps1 = new List<Dictionary<string,string>> {
                new Dictionary<string,string> {
                    {"Ь","J'"},{"ь","j'"},{"Й","'J"},{"й","'j"}
                },
                new Dictionary<string,string> {
                    {"Г","Gh"},{"Є","Je"},{"Ж","Zh"},{"Ї","Ji"},{"Х","Kh"},{"Щ","Shch"},{"Ш","Sh"},{"Ч","Ch"},{"Ю","Ju"},{"Я","Ja"},{"Ё","Jow"},{"Ў","Uh"},{"Ъ","Oh"},{"Ы","Yw"},{"Э","Ehw"},{"Ь","Hj"},{"ь","hj"}
                },
                new Dictionary<string,string> {
                    {"А","A"},{"а","a"},{"Б","B"},{"б","b"},{"В","V"},{"в","v"},{"Г","GH"},{"г","gh"},{"Ґ","G"},{"ґ","g"},{"Д","D"},{"д","d"},{"Е","E"},{"е","e"},{"Є","JE"},{"є","je"},{"Ж","ZH"},{"ж","zh"},{"З","Z"},{"з","z"},{"И","Y"},{"и","y"},{"І","I"},{"і","i"},{"Ї","JI"},{"ї","ji"},{"Х","KH"},{"х","kh"},{"К","K"},{"к","k"},{"Л","L"},{"л","l"},{"М","M"},{"м","m"},{"Н","N"},{"н","n"},{"О","O"},{"о","o"},{"П","P"},{"п","p"},{"Р","R"},{"р","r"},{"Щ","SHCH"},{"щ","shch"},{"Ш","SH"},{"ш","sh"},{"С","S"},{"с","s"},{"Т","T"},{"т","t"},{"У","U"},{"у","u"},{"Ф","F"},{"ф","f"},{"Ч","CH"},{"ч","ch"},{"Ц","C"},{"ц","c"},{"Ю","JU"},{"ю","ju"},{"Я","JA"},{"я","ja"},{"Й","J"},{"й","j"},{"Ь","J"},{"ь","j"},{"’","'"},{"Ё","JOW"},{"ё","jow"},{"Ў","UH"},{"ў","uh"},{"Ъ","OH"},{"ъ","oh"},{"Ы","YW"},{"ы","yw"},{"Э","EHW"},{"э","ehw"}
                }
            };
            this._tr1 = (Match match) => {
                for (int i = match.Groups.Count; i > 0; i -= 1) {
                    Group group = match.Groups[i];
                    if (!group.Success) { continue; }
                    string key = group.Value;
                    if (_maps1[i-1].TryGetValue(key, out string? value)) {
                        return value;
                    }
                    return key;
                }
                return match.Groups[0].Value;
            };
        }

        public string Transform(string text) {
            text = text.Normalize(NormalizationForm.FormC);
            text = this._rx1.Replace(text, this._tr1);
            text = text.Normalize(NormalizationForm.FormC);
            return text;
        }
    }

    private sealed class _Uklatn_uk_uk_Latn_KMU_55 : _UKLatnTransformer {
        private Regex _rx1;
        private MatchEvaluator _tr1;
        private Regex _rx2;
        private MatchEvaluator _tr2;

        internal _Uklatn_uk_uk_Latn_KMU_55() {
            this._rx1 = new Regex(@"(?<=[ЁЄІЇЎА-яёєіїўҐґ])([’\u0027])(?=[ЁЄІЇЎА-яёєіїўҐґ])",
                RegexOptions.Compiled | RegexOptions.CultureInvariant);
            var _maps1 = new List<Dictionary<string,string>> {
                new Dictionary<string,string> {
                    {"’",""},{"'",""}
                }
            };
            this._tr1 = (Match match) => {
                for (int i = match.Groups.Count; i > 0; i -= 1) {
                    Group group = match.Groups[i];
                    if (!group.Success) { continue; }
                    string key = group.Value;
                    if (_maps1[i-1].TryGetValue(key, out string? value)) {
                        return value;
                    }
                    return key;
                }
                return match.Groups[0].Value;
            };
            this._rx2 = new Regex(@"\b([ЄЇЮЯ])(?=\u0301?[а-яёєіїўґ’])|\b([ЙйЄЇЮЯєїюя])|([Зз]Г|[ЖХЦЩШЧЄЇЮЯ])(?=\u0301?[а-яёєіїўґ’])|([Зз][Гг]|[ЄІЇА-ЩЬЮ-щьюяєіїҐґ’])",
                RegexOptions.Compiled | RegexOptions.CultureInvariant);
            var _maps2 = new List<Dictionary<string,string>> {
                new Dictionary<string,string> {
                    {"Є","Ye"},{"Ї","Yi"},{"Ю","Yu"},{"Я","Ya"}
                },
                new Dictionary<string,string> {
                    {"Й","Y"},{"й","y"},{"Є","YE"},{"є","ye"},{"Ї","YI"},{"ї","yi"},{"Ю","YU"},{"ю","yu"},{"Я","YA"},{"я","ya"}
                },
                new Dictionary<string,string> {
                    {"ЗГ","ZGh"},{"зГ","zGh"},{"Ж","Zh"},{"Х","Kh"},{"Ц","Ts"},{"Щ","Shch"},{"Ш","Sh"},{"Ч","Ch"},{"Є","Ie"},{"Ї","I"},{"Ю","Iu"},{"Я","Ia"}
                },
                new Dictionary<string,string> {
                    {"ЗГ","ZGH"},{"Зг","Zgh"},{"зГ","zGH"},{"зг","zgh"},{"А","A"},{"а","a"},{"Б","B"},{"б","b"},{"В","V"},{"в","v"},{"Г","H"},{"г","h"},{"Ґ","G"},{"ґ","g"},{"Д","D"},{"д","d"},{"Е","E"},{"е","e"},{"Є","IE"},{"є","ie"},{"Ж","ZH"},{"ж","zh"},{"З","Z"},{"з","z"},{"И","Y"},{"и","y"},{"І","I"},{"і","i"},{"Ї","I"},{"ї","i"},{"Х","KH"},{"х","kh"},{"К","K"},{"к","k"},{"Л","L"},{"л","l"},{"М","M"},{"м","m"},{"Н","N"},{"н","n"},{"О","O"},{"о","o"},{"П","P"},{"п","p"},{"Р","R"},{"р","r"},{"Щ","SHCH"},{"щ","shch"},{"Ш","SH"},{"ш","sh"},{"С","S"},{"с","s"},{"Т","T"},{"т","t"},{"У","U"},{"у","u"},{"Ф","F"},{"ф","f"},{"Ч","CH"},{"ч","ch"},{"Ц","TS"},{"ц","ts"},{"Ю","IU"},{"ю","iu"},{"Я","IA"},{"я","ia"},{"Й","I"},{"й","i"},{"Ь",""},{"ь",""},{"’",""}
                }
            };
            this._tr2 = (Match match) => {
                for (int i = match.Groups.Count; i > 0; i -= 1) {
                    Group group = match.Groups[i];
                    if (!group.Success) { continue; }
                    string key = group.Value;
                    if (_maps2[i-1].TryGetValue(key, out string? value)) {
                        return value;
                    }
                    return key;
                }
                return match.Groups[0].Value;
            };
        }

        public string Transform(string text) {
            text = text.Normalize(NormalizationForm.FormC);
            text = this._rx1.Replace(text, this._tr1);
            text = this._rx2.Replace(text, this._tr2);
            text = text.Normalize(NormalizationForm.FormC);
            return text;
        }
    }

    private sealed class _Uklatn_uk_Latn_DSTU_9112_A_uk : _UKLatnTransformer {
        private Regex _rx1;
        private MatchEvaluator _tr1;
        private Regex _rx2;
        private MatchEvaluator _tr2;

        internal _Uklatn_uk_Latn_DSTU_9112_A_uk() {
            this._rx1 = new Regex(@"([ÁáÉéÍíÓóÚúÝýḮḯ])",
                RegexOptions.Compiled | RegexOptions.CultureInvariant);
            var _maps1 = new List<Dictionary<string,string>> {
                new Dictionary<string,string> {
                    {"Á","Á"},{"á","á"},{"É","É"},{"é","é"},{"Í","Í"},{"í","í"},{"Ó","Ó"},{"ó","ó"},{"Ú","Ú"},{"ú","ú"},{"Ý","Ý"},{"ý","ý"},{"Ḯ","Ḯ"},{"ḯ","ḯ"}
                }
            };
            this._tr1 = (Match match) => {
                for (int i = match.Groups.Count; i > 0; i -= 1) {
                    Group group = match.Groups[i];
                    if (!group.Success) { continue; }
                    string key = group.Value;
                    if (_maps1[i-1].TryGetValue(key, out string? value)) {
                        return value;
                    }
                    return key;
                }
                return match.Groups[0].Value;
            };
            this._rx2 = new Regex(@"(J[Ee]|j[Ee]|J[Uu]|j[Uu]|J[Aa]|j[Aa]|[A-GIK-PR-VXYZa-gik-pr-vxyzÏÖïöČčĒēĞğĴĵŜŝŠšŬŭŽžǑǒȲȳ])|(?<=[BbCcDdFfGgKkLlMmNnPpRrSsTtVvXxZzČčĞğŜŝŠšŽž])([Jj]\u0027(?=[AaEeUu])|[Jj])|(\u0027[Jj](?![AaEeIiUu])|\u0027(?=[Jj])|[Jj])",
                RegexOptions.Compiled | RegexOptions.CultureInvariant);
            var _maps2 = new List<Dictionary<string,string>> {
                new Dictionary<string,string> {
                    {"A","А"},{"a","а"},{"B","Б"},{"b","б"},{"V","В"},{"v","в"},{"Ğ","Г"},{"ğ","г"},{"G","Ґ"},{"g","ґ"},{"D","Д"},{"d","д"},{"E","Е"},{"e","е"},{"JE","Є"},{"Je","Є"},{"jE","є"},{"je","є"},{"Ž","Ж"},{"ž","ж"},{"Z","З"},{"z","з"},{"Y","И"},{"y","и"},{"I","І"},{"i","і"},{"Ï","Ї"},{"ï","ї"},{"K","К"},{"k","к"},{"L","Л"},{"l","л"},{"M","М"},{"m","м"},{"N","Н"},{"n","н"},{"O","О"},{"o","о"},{"P","П"},{"p","п"},{"R","Р"},{"r","р"},{"S","С"},{"s","с"},{"T","Т"},{"t","т"},{"U","У"},{"u","у"},{"F","Ф"},{"f","ф"},{"X","Х"},{"x","х"},{"C","Ц"},{"c","ц"},{"Č","Ч"},{"č","ч"},{"Š","Ш"},{"š","ш"},{"Ŝ","Щ"},{"ŝ","щ"},{"JU","Ю"},{"Ju","Ю"},{"jU","ю"},{"ju","ю"},{"JA","Я"},{"Ja","Я"},{"jA","я"},{"ja","я"},{"Ĵ","Ь"},{"ĵ","ь"},{"Ö","Ё"},{"ö","ё"},{"Ŭ","Ў"},{"ŭ","ў"},{"Ǒ","Ъ"},{"ǒ","ъ"},{"Ȳ","Ы"},{"ȳ","ы"},{"Ē","Э"},{"ē","э"}
                },
                new Dictionary<string,string> {
                    {"J","Ь"},{"j","ь"},{"J'","Ь"},{"j'","ь"}
                },
                new Dictionary<string,string> {
                    {"'J","Й"},{"'j","й"},{"'","’"},{"J","Й"},{"j","й"}
                }
            };
            this._tr2 = (Match match) => {
                for (int i = match.Groups.Count; i > 0; i -= 1) {
                    Group group = match.Groups[i];
                    if (!group.Success) { continue; }
                    string key = group.Value;
                    if (_maps2[i-1].TryGetValue(key, out string? value)) {
                        return value;
                    }
                    return key;
                }
                return match.Groups[0].Value;
            };
        }

        public string Transform(string text) {
            text = text.Normalize(NormalizationForm.FormC);
            text = this._rx1.Replace(text, this._tr1);
            text = this._rx2.Replace(text, this._tr2);
            text = text.Normalize(NormalizationForm.FormC);
            return text;
        }
    }

    private sealed class _Uklatn_uk_Latn_DSTU_9112_B_uk : _UKLatnTransformer {
        private Regex _rx1;
        private MatchEvaluator _tr1;
        private Regex _rx2;
        private MatchEvaluator _tr2;

        internal _Uklatn_uk_Latn_DSTU_9112_B_uk() {
            this._rx1 = new Regex(@"([ÁáÉéÍíÓóÚúÝý])",
                RegexOptions.Compiled | RegexOptions.CultureInvariant);
            var _maps1 = new List<Dictionary<string,string>> {
                new Dictionary<string,string> {
                    {"Á","Á"},{"á","á"},{"É","É"},{"é","é"},{"Í","Í"},{"í","í"},{"Ó","Ó"},{"ó","ó"},{"Ú","Ú"},{"ú","ú"},{"Ý","Ý"},{"ý","ý"}
                }
            };
            this._tr1 = (Match match) => {
                for (int i = match.Groups.Count; i > 0; i -= 1) {
                    Group group = match.Groups[i];
                    if (!group.Success) { continue; }
                    string key = group.Value;
                    if (_maps1[i-1].TryGetValue(key, out string? value)) {
                        return value;
                    }
                    return key;
                }
                return match.Groups[0].Value;
            };
            this._rx2 = new Regex(@"([Jj][Oo][Ww]|[Ss][Hh][Cc][Hh]|[CcGgKkSsZzUuOo][Hh]|[Yy][Ww]|[Ee][Hh][Ww]|[Jj][EeIiUuAa]|[Hh][Jj]|[A-GIK-PR-VYZa-gik-pr-vyz])|(?<=[Ss][Hh][Cc][Hh])([Jj]\u0027(?=[AaEeIiUu])|[Jj])|(?<=[CcGgKkSsZz][Hh])([Jj]\u0027(?=[AaEeIiUu])|[Jj])|(?<=[BCDFGKLMNPRSTVZbcdfgklmnprstvzv])([Jj]\u0027(?=[AaEeIiUu])|[Jj])|(\u0027[Jj](?![AaEeIiUu])|\u0027(?=[Jj])|[Jj])",
                RegexOptions.Compiled | RegexOptions.CultureInvariant);
            var _maps2 = new List<Dictionary<string,string>> {
                new Dictionary<string,string> {
                    {"A","А"},{"a","а"},{"B","Б"},{"b","б"},{"V","В"},{"v","в"},{"GH","Г"},{"Gh","Г"},{"gH","г"},{"gh","г"},{"G","Ґ"},{"g","ґ"},{"D","Д"},{"d","д"},{"E","Е"},{"e","е"},{"JE","Є"},{"Je","Є"},{"jE","є"},{"je","є"},{"ZH","Ж"},{"Zh","Ж"},{"zH","ж"},{"zh","ж"},{"Z","З"},{"z","з"},{"Y","И"},{"y","и"},{"I","І"},{"i","і"},{"JI","Ї"},{"Ji","Ї"},{"jI","ї"},{"ji","ї"},{"KH","Х"},{"Kh","Х"},{"kH","х"},{"kh","х"},{"K","К"},{"k","к"},{"L","Л"},{"l","л"},{"M","М"},{"m","м"},{"N","Н"},{"n","н"},{"O","О"},{"o","о"},{"P","П"},{"p","п"},{"R","Р"},{"r","р"},{"SHCH","Щ"},{"SHCh","Щ"},{"SHcH","Щ"},{"SHch","Щ"},{"ShCH","Щ"},{"ShCh","Щ"},{"ShcH","Щ"},{"Shch","Щ"},{"sHCH","щ"},{"sHCh","щ"},{"sHcH","щ"},{"sHch","щ"},{"shCH","щ"},{"shCh","щ"},{"shcH","щ"},{"shch","щ"},{"SH","Ш"},{"Sh","Ш"},{"sH","ш"},{"sh","ш"},{"S","С"},{"s","с"},{"T","Т"},{"t","т"},{"U","У"},{"u","у"},{"F","Ф"},{"f","ф"},{"CH","Ч"},{"Ch","Ч"},{"cH","ч"},{"ch","ч"},{"C","Ц"},{"c","ц"},{"JU","Ю"},{"Ju","Ю"},{"jU","ю"},{"ju","ю"},{"JA","Я"},{"Ja","Я"},{"jA","я"},{"ja","я"},{"HJ","Ь"},{"Hj","Ь"},{"hJ","ь"},{"hj","ь"},{"JOW","Ё"},{"JOw","Ё"},{"JoW","Ё"},{"Jow","Ё"},{"jOW","ё"},{"jOw","ё"},{"joW","ё"},{"jow","ё"},{"UH","Ў"},{"Uh","Ў"},{"uH","ў"},{"uh","ў"},{"OH","Ъ"},{"Oh","Ъ"},{"oH","ъ"},{"oh","ъ"},{"YW","Ы"},{"Yw","Ы"},{"yW","ы"},{"yw","ы"},{"EHW","Э"},{"EHw","Э"},{"EhW","Э"},{"Ehw","Э"},{"eHW","э"},{"eHw","э"},{"ehW","э"},{"ehw","э"}
                },
                new Dictionary<string,string> {
                    {"J","Ь"},{"j","ь"},{"J'","Ь"},{"j'","ь"}
                },
                new Dictionary<string,string> {
                    {"J","Ь"},{"j","ь"},{"J'","Ь"},{"j'","ь"}
                },
                new Dictionary<string,string> {
                    {"J","Ь"},{"j","ь"},{"J'","Ь"},{"j'","ь"}
                },
                new Dictionary<string,string> {
                    {"'J","Й"},{"'j","й"},{"'","’"},{"J","Й"},{"j","й"}
                }
            };
            this._tr2 = (Match match) => {
                for (int i = match.Groups.Count; i > 0; i -= 1) {
                    Group group = match.Groups[i];
                    if (!group.Success) { continue; }
                    string key = group.Value;
                    if (_maps2[i-1].TryGetValue(key, out string? value)) {
                        return value;
                    }
                    return key;
                }
                return match.Groups[0].Value;
            };
        }

        public string Transform(string text) {
            text = text.Normalize(NormalizationForm.FormC);
            text = this._rx1.Replace(text, this._tr1);
            text = this._rx2.Replace(text, this._tr2);
            text = text.Normalize(NormalizationForm.FormC);
            return text;
        }
    }

    private static readonly _UKLatnTransformer?[][] _UklatnTables = {
        new _UKLatnTransformer?[2] {null, null},
        new _UKLatnTransformer?[2] {new _Uklatn_uk_uk_Latn_DSTU_9112_A(), new _Uklatn_uk_Latn_DSTU_9112_A_uk()},
        new _UKLatnTransformer?[2] {new _Uklatn_uk_uk_Latn_DSTU_9112_B(), new _Uklatn_uk_Latn_DSTU_9112_B_uk()},
        new _UKLatnTransformer?[2] {new _Uklatn_uk_uk_Latn_KMU_55(), null},
    };
}
