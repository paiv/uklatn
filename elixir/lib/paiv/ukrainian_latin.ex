# Generated by gentables.py, do not edit.

defmodule Paiv.UkrainianLatin do
  @moduledoc """
  Ukrainian Cyrillic transliteration to and from Latin script.

  Tables:
  - `:DSTU_9112_A` DSTU 9112:2021 System A
  - `:DSTU_9112_B` DSTU 9112:2021 System B
  - `:KMU_55` KMU 55:2010, not reversible

  ## Examples
      iex> Paiv.UkrainianLatin.encode("Доброго вечора!")
      "Dobroğo večora!"
      iex> Paiv.UkrainianLatin.decode("Paljanycja")
      "Паляниця"

  Select a transliteration scheme:
      iex> Paiv.UkrainianLatin.encode("Борщ", :DSTU_9112_B)
      "Borshch"
  """

  @doc """
  Transliterates a string of Ukrainian Cyrillic to Latin script.
  """
  def encode(text, table \\ :DSTU_9112_A)

  def encode(text, :DSTU_9112_A) when is_binary(text) do
    encode_dstu_9112_a(text)
  end

  def encode(text, :DSTU_9112_B) when is_binary(text) do
    encode_dstu_9112_b(text)
  end

  def encode(text, :KMU_55) when is_binary(text) do
    encode_kmu_55(text)
  end

  @doc """
  Re-transliterates a string of Ukrainian Latin to Cyrillic script.
  """
  def decode(text, table \\ :DSTU_9112_A)

  def decode(text, :DSTU_9112_A) when is_binary(text) do
    decode_dstu_9112_a(text)
  end

  def decode(text, :DSTU_9112_B) when is_binary(text) do
    decode_dstu_9112_b(text)
  end

  defp encode_dstu_9112_a(text) do
    rx1 =
      ~r/\b([Ьь])|([Ьь](?=[АаЕеУу])|[ЄЮЯ](?=\x{0301}?[а-щьюяєіїґ’])|(?<=[Б-ДЖЗК-НП-ТФ-Щб-джзк-нп-тф-щҐґ])[Йй])|([ЁЄІЇЎА-яёєіїўҐґ’])/u

    maps11 = %{"Ь" => "Ĵ", "ь" => "ĵ"}

    maps12 = %{
      "Ь" => "J'",
      "ь" => "j'",
      "Є" => "Je",
      "Ю" => "Ju",
      "Я" => "Ja",
      "Й" => "'J",
      "й" => "'j"
    }

    maps13 = %{
      "А" => "A",
      "а" => "a",
      "Б" => "B",
      "б" => "b",
      "В" => "V",
      "в" => "v",
      "Г" => "Ğ",
      "г" => "ğ",
      "Ґ" => "G",
      "ґ" => "g",
      "Д" => "D",
      "д" => "d",
      "Е" => "E",
      "е" => "e",
      "Є" => "JE",
      "є" => "je",
      "Ж" => "Ž",
      "ж" => "ž",
      "З" => "Z",
      "з" => "z",
      "И" => "Y",
      "и" => "y",
      "І" => "I",
      "і" => "i",
      "Ї" => "Ï",
      "ї" => "ï",
      "К" => "K",
      "к" => "k",
      "Л" => "L",
      "л" => "l",
      "М" => "M",
      "м" => "m",
      "Н" => "N",
      "н" => "n",
      "О" => "O",
      "о" => "o",
      "П" => "P",
      "п" => "p",
      "Р" => "R",
      "р" => "r",
      "С" => "S",
      "с" => "s",
      "Т" => "T",
      "т" => "t",
      "У" => "U",
      "у" => "u",
      "Ф" => "F",
      "ф" => "f",
      "Х" => "X",
      "х" => "x",
      "Ц" => "C",
      "ц" => "c",
      "Ч" => "Č",
      "ч" => "č",
      "Ш" => "Š",
      "ш" => "š",
      "Щ" => "Ŝ",
      "щ" => "ŝ",
      "Ю" => "JU",
      "ю" => "ju",
      "Я" => "JA",
      "я" => "ja",
      "Ь" => "J",
      "ь" => "j",
      "Й" => "J",
      "й" => "j",
      "’" => "'",
      "Ё" => "Ö",
      "ё" => "ö",
      "Ў" => "Ŭ",
      "ў" => "ŭ",
      "Ъ" => "Ǒ",
      "ъ" => "ǒ",
      "Ы" => "Ȳ",
      "ы" => "ȳ",
      "Э" => "Ē",
      "э" => "ē"
    }

    tr1 = fn s, g1, g2, g3 ->
      cond do
        g1 != "" -> maps11[g1] || g1
        g2 != "" -> maps12[g2] || g2
        g3 != "" -> maps13[g3] || g3
        true -> s
      end
    end

    text
    |> String.normalize(:nfc)
    |> then(&Regex.replace(rx1, &1, tr1))
    |> String.normalize(:nfc)
  end

  defp encode_dstu_9112_b(text) do
    rx1 =
      ~r/([Ьь](?=[АаЕеІіУу])|(?<=[Б-ДЖЗК-НП-ТФ-Щб-джзк-нп-тф-щҐґ])[Йй])|([ГЄЖЇХЩШЧЮЯЁЎЪЫЭ](?=\x{0301}?[а-яёєіїўґ’])|\b[Ьь])|([ЁЄІЇЎА-яёєіїўҐґ’])/u

    maps11 = %{"Ь" => "J'", "ь" => "j'", "Й" => "'J", "й" => "'j"}

    maps12 = %{
      "Г" => "Gh",
      "Є" => "Je",
      "Ж" => "Zh",
      "Ї" => "Ji",
      "Х" => "Kh",
      "Щ" => "Shch",
      "Ш" => "Sh",
      "Ч" => "Ch",
      "Ю" => "Ju",
      "Я" => "Ja",
      "Ё" => "Jow",
      "Ў" => "Uh",
      "Ъ" => "Oh",
      "Ы" => "Yw",
      "Э" => "Ehw",
      "Ь" => "Hj",
      "ь" => "hj"
    }

    maps13 = %{
      "А" => "A",
      "а" => "a",
      "Б" => "B",
      "б" => "b",
      "В" => "V",
      "в" => "v",
      "Г" => "GH",
      "г" => "gh",
      "Ґ" => "G",
      "ґ" => "g",
      "Д" => "D",
      "д" => "d",
      "Е" => "E",
      "е" => "e",
      "Є" => "JE",
      "є" => "je",
      "Ж" => "ZH",
      "ж" => "zh",
      "З" => "Z",
      "з" => "z",
      "И" => "Y",
      "и" => "y",
      "І" => "I",
      "і" => "i",
      "Ї" => "JI",
      "ї" => "ji",
      "Х" => "KH",
      "х" => "kh",
      "К" => "K",
      "к" => "k",
      "Л" => "L",
      "л" => "l",
      "М" => "M",
      "м" => "m",
      "Н" => "N",
      "н" => "n",
      "О" => "O",
      "о" => "o",
      "П" => "P",
      "п" => "p",
      "Р" => "R",
      "р" => "r",
      "Щ" => "SHCH",
      "щ" => "shch",
      "Ш" => "SH",
      "ш" => "sh",
      "С" => "S",
      "с" => "s",
      "Т" => "T",
      "т" => "t",
      "У" => "U",
      "у" => "u",
      "Ф" => "F",
      "ф" => "f",
      "Ч" => "CH",
      "ч" => "ch",
      "Ц" => "C",
      "ц" => "c",
      "Ю" => "JU",
      "ю" => "ju",
      "Я" => "JA",
      "я" => "ja",
      "Й" => "J",
      "й" => "j",
      "Ь" => "J",
      "ь" => "j",
      "’" => "'",
      "Ё" => "JOW",
      "ё" => "jow",
      "Ў" => "UH",
      "ў" => "uh",
      "Ъ" => "OH",
      "ъ" => "oh",
      "Ы" => "YW",
      "ы" => "yw",
      "Э" => "EHW",
      "э" => "ehw"
    }

    tr1 = fn s, g1, g2, g3 ->
      cond do
        g1 != "" -> maps11[g1] || g1
        g2 != "" -> maps12[g2] || g2
        g3 != "" -> maps13[g3] || g3
        true -> s
      end
    end

    text
    |> String.normalize(:nfc)
    |> then(&Regex.replace(rx1, &1, tr1))
    |> String.normalize(:nfc)
  end

  defp encode_kmu_55(text) do
    rx1 = ~r/(?<=[ЁЄІЇЎА-яёєіїўҐґ])([’\x{0027}])(?=[ЁЄІЇЎА-яёєіїўҐґ])/u
    maps11 = %{"’" => "", "'" => ""}

    tr1 = fn _, g1 ->
      maps11[g1] || g1
    end

    rx2 =
      ~r/\b([ЄЇЮЯ])(?=\x{0301}?[а-яёєіїўґ’])|\b([ЙйЄЇЮЯєїюя])|([Зз]Г|[ЖХЦЩШЧЄЇЮЯ])(?=\x{0301}?[а-яёєіїўґ’])|([Зз][Гг]|[ЄІЇА-ЩЬЮ-щьюяєіїҐґ’])/u

    maps21 = %{"Є" => "Ye", "Ї" => "Yi", "Ю" => "Yu", "Я" => "Ya"}

    maps22 = %{
      "Й" => "Y",
      "й" => "y",
      "Є" => "YE",
      "є" => "ye",
      "Ї" => "YI",
      "ї" => "yi",
      "Ю" => "YU",
      "ю" => "yu",
      "Я" => "YA",
      "я" => "ya"
    }

    maps23 = %{
      "ЗГ" => "ZGh",
      "зГ" => "zGh",
      "Ж" => "Zh",
      "Х" => "Kh",
      "Ц" => "Ts",
      "Щ" => "Shch",
      "Ш" => "Sh",
      "Ч" => "Ch",
      "Є" => "Ie",
      "Ї" => "I",
      "Ю" => "Iu",
      "Я" => "Ia"
    }

    maps24 = %{
      "ЗГ" => "ZGH",
      "Зг" => "Zgh",
      "зГ" => "zGH",
      "зг" => "zgh",
      "А" => "A",
      "а" => "a",
      "Б" => "B",
      "б" => "b",
      "В" => "V",
      "в" => "v",
      "Г" => "H",
      "г" => "h",
      "Ґ" => "G",
      "ґ" => "g",
      "Д" => "D",
      "д" => "d",
      "Е" => "E",
      "е" => "e",
      "Є" => "IE",
      "є" => "ie",
      "Ж" => "ZH",
      "ж" => "zh",
      "З" => "Z",
      "з" => "z",
      "И" => "Y",
      "и" => "y",
      "І" => "I",
      "і" => "i",
      "Ї" => "I",
      "ї" => "i",
      "Х" => "KH",
      "х" => "kh",
      "К" => "K",
      "к" => "k",
      "Л" => "L",
      "л" => "l",
      "М" => "M",
      "м" => "m",
      "Н" => "N",
      "н" => "n",
      "О" => "O",
      "о" => "o",
      "П" => "P",
      "п" => "p",
      "Р" => "R",
      "р" => "r",
      "Щ" => "SHCH",
      "щ" => "shch",
      "Ш" => "SH",
      "ш" => "sh",
      "С" => "S",
      "с" => "s",
      "Т" => "T",
      "т" => "t",
      "У" => "U",
      "у" => "u",
      "Ф" => "F",
      "ф" => "f",
      "Ч" => "CH",
      "ч" => "ch",
      "Ц" => "TS",
      "ц" => "ts",
      "Ю" => "IU",
      "ю" => "iu",
      "Я" => "IA",
      "я" => "ia",
      "Й" => "I",
      "й" => "i",
      "Ь" => "",
      "ь" => "",
      "’" => ""
    }

    tr2 = fn s, g1, g2, g3, g4 ->
      cond do
        g1 != "" -> maps21[g1] || g1
        g2 != "" -> maps22[g2] || g2
        g3 != "" -> maps23[g3] || g3
        g4 != "" -> maps24[g4] || g4
        true -> s
      end
    end

    text
    |> String.normalize(:nfc)
    |> then(&Regex.replace(rx1, &1, tr1))
    |> then(&Regex.replace(rx2, &1, tr2))
    |> String.normalize(:nfc)
  end

  defp decode_dstu_9112_a(text) do
    rx1 = ~r/([ÁáÉéÍíÓóÚúÝýḮḯ])/u

    maps11 = %{
      "Á" => "Á",
      "á" => "á",
      "É" => "É",
      "é" => "é",
      "Í" => "Í",
      "í" => "í",
      "Ó" => "Ó",
      "ó" => "ó",
      "Ú" => "Ú",
      "ú" => "ú",
      "Ý" => "Ý",
      "ý" => "ý",
      "Ḯ" => "Ḯ",
      "ḯ" => "ḯ"
    }

    tr1 = fn _, g1 ->
      maps11[g1] || g1
    end

    rx2 =
      ~r/(J[Ee]|j[Ee]|J[Uu]|j[Uu]|J[Aa]|j[Aa]|[A-GIK-PR-VXYZa-gik-pr-vxyzÏÖïöČčĒēĞğĴĵŜŝŠšŬŭŽžǑǒȲȳ])|(?<=[BbCcDdFfGgKkLlMmNnPpRrSsTtVvXxZzČčĞğŜŝŠšŽž])([Jj]\x{0027}(?=[AaEeUu])|[Jj])|(\x{0027}[Jj](?![AaEeIiUu])|\x{0027}(?=[Jj])|[Jj])/u

    maps21 = %{
      "A" => "А",
      "a" => "а",
      "B" => "Б",
      "b" => "б",
      "V" => "В",
      "v" => "в",
      "Ğ" => "Г",
      "ğ" => "г",
      "G" => "Ґ",
      "g" => "ґ",
      "D" => "Д",
      "d" => "д",
      "E" => "Е",
      "e" => "е",
      "JE" => "Є",
      "Je" => "Є",
      "jE" => "є",
      "je" => "є",
      "Ž" => "Ж",
      "ž" => "ж",
      "Z" => "З",
      "z" => "з",
      "Y" => "И",
      "y" => "и",
      "I" => "І",
      "i" => "і",
      "Ï" => "Ї",
      "ï" => "ї",
      "K" => "К",
      "k" => "к",
      "L" => "Л",
      "l" => "л",
      "M" => "М",
      "m" => "м",
      "N" => "Н",
      "n" => "н",
      "O" => "О",
      "o" => "о",
      "P" => "П",
      "p" => "п",
      "R" => "Р",
      "r" => "р",
      "S" => "С",
      "s" => "с",
      "T" => "Т",
      "t" => "т",
      "U" => "У",
      "u" => "у",
      "F" => "Ф",
      "f" => "ф",
      "X" => "Х",
      "x" => "х",
      "C" => "Ц",
      "c" => "ц",
      "Č" => "Ч",
      "č" => "ч",
      "Š" => "Ш",
      "š" => "ш",
      "Ŝ" => "Щ",
      "ŝ" => "щ",
      "JU" => "Ю",
      "Ju" => "Ю",
      "jU" => "ю",
      "ju" => "ю",
      "JA" => "Я",
      "Ja" => "Я",
      "jA" => "я",
      "ja" => "я",
      "Ĵ" => "Ь",
      "ĵ" => "ь",
      "Ö" => "Ё",
      "ö" => "ё",
      "Ŭ" => "Ў",
      "ŭ" => "ў",
      "Ǒ" => "Ъ",
      "ǒ" => "ъ",
      "Ȳ" => "Ы",
      "ȳ" => "ы",
      "Ē" => "Э",
      "ē" => "э"
    }

    maps22 = %{"J" => "Ь", "j" => "ь", "J'" => "Ь", "j'" => "ь"}
    maps23 = %{"'J" => "Й", "'j" => "й", "'" => "’", "J" => "Й", "j" => "й"}

    tr2 = fn s, g1, g2, g3 ->
      cond do
        g1 != "" -> maps21[g1] || g1
        g2 != "" -> maps22[g2] || g2
        g3 != "" -> maps23[g3] || g3
        true -> s
      end
    end

    text
    |> String.normalize(:nfc)
    |> then(&Regex.replace(rx1, &1, tr1))
    |> then(&Regex.replace(rx2, &1, tr2))
    |> String.normalize(:nfc)
  end

  defp decode_dstu_9112_b(text) do
    rx1 = ~r/([ÁáÉéÍíÓóÚúÝý])/u

    maps11 = %{
      "Á" => "Á",
      "á" => "á",
      "É" => "É",
      "é" => "é",
      "Í" => "Í",
      "í" => "í",
      "Ó" => "Ó",
      "ó" => "ó",
      "Ú" => "Ú",
      "ú" => "ú",
      "Ý" => "Ý",
      "ý" => "ý"
    }

    tr1 = fn _, g1 ->
      maps11[g1] || g1
    end

    rx2 =
      ~r/([Jj][Oo][Ww]|[Ss][Hh][Cc][Hh]|[CcGgKkSsZzUuOo][Hh]|[Yy][Ww]|[Ee][Hh][Ww]|[Jj][EeIiUuAa]|[Hh][Jj]|[A-GIK-PR-VYZa-gik-pr-vyz])|(?<=[Ss][Hh][Cc][Hh])([Jj]\x{0027}(?=[AaEeIiUu])|[Jj])|(?<=[CcGgKkSsZz][Hh])([Jj]\x{0027}(?=[AaEeIiUu])|[Jj])|(?<=[BCDFGKLMNPRSTVZbcdfgklmnprstvzv])([Jj]\x{0027}(?=[AaEeIiUu])|[Jj])|(\x{0027}[Jj](?![AaEeIiUu])|\x{0027}(?=[Jj])|[Jj])/u

    maps21 = %{
      "A" => "А",
      "a" => "а",
      "B" => "Б",
      "b" => "б",
      "V" => "В",
      "v" => "в",
      "GH" => "Г",
      "Gh" => "Г",
      "gH" => "г",
      "gh" => "г",
      "G" => "Ґ",
      "g" => "ґ",
      "D" => "Д",
      "d" => "д",
      "E" => "Е",
      "e" => "е",
      "JE" => "Є",
      "Je" => "Є",
      "jE" => "є",
      "je" => "є",
      "ZH" => "Ж",
      "Zh" => "Ж",
      "zH" => "ж",
      "zh" => "ж",
      "Z" => "З",
      "z" => "з",
      "Y" => "И",
      "y" => "и",
      "I" => "І",
      "i" => "і",
      "JI" => "Ї",
      "Ji" => "Ї",
      "jI" => "ї",
      "ji" => "ї",
      "KH" => "Х",
      "Kh" => "Х",
      "kH" => "х",
      "kh" => "х",
      "K" => "К",
      "k" => "к",
      "L" => "Л",
      "l" => "л",
      "M" => "М",
      "m" => "м",
      "N" => "Н",
      "n" => "н",
      "O" => "О",
      "o" => "о",
      "P" => "П",
      "p" => "п",
      "R" => "Р",
      "r" => "р",
      "SHCH" => "Щ",
      "SHCh" => "Щ",
      "SHcH" => "Щ",
      "SHch" => "Щ",
      "ShCH" => "Щ",
      "ShCh" => "Щ",
      "ShcH" => "Щ",
      "Shch" => "Щ",
      "sHCH" => "щ",
      "sHCh" => "щ",
      "sHcH" => "щ",
      "sHch" => "щ",
      "shCH" => "щ",
      "shCh" => "щ",
      "shcH" => "щ",
      "shch" => "щ",
      "SH" => "Ш",
      "Sh" => "Ш",
      "sH" => "ш",
      "sh" => "ш",
      "S" => "С",
      "s" => "с",
      "T" => "Т",
      "t" => "т",
      "U" => "У",
      "u" => "у",
      "F" => "Ф",
      "f" => "ф",
      "CH" => "Ч",
      "Ch" => "Ч",
      "cH" => "ч",
      "ch" => "ч",
      "C" => "Ц",
      "c" => "ц",
      "JU" => "Ю",
      "Ju" => "Ю",
      "jU" => "ю",
      "ju" => "ю",
      "JA" => "Я",
      "Ja" => "Я",
      "jA" => "я",
      "ja" => "я",
      "HJ" => "Ь",
      "Hj" => "Ь",
      "hJ" => "ь",
      "hj" => "ь",
      "JOW" => "Ё",
      "JOw" => "Ё",
      "JoW" => "Ё",
      "Jow" => "Ё",
      "jOW" => "ё",
      "jOw" => "ё",
      "joW" => "ё",
      "jow" => "ё",
      "UH" => "Ў",
      "Uh" => "Ў",
      "uH" => "ў",
      "uh" => "ў",
      "OH" => "Ъ",
      "Oh" => "Ъ",
      "oH" => "ъ",
      "oh" => "ъ",
      "YW" => "Ы",
      "Yw" => "Ы",
      "yW" => "ы",
      "yw" => "ы",
      "EHW" => "Э",
      "EHw" => "Э",
      "EhW" => "Э",
      "Ehw" => "Э",
      "eHW" => "э",
      "eHw" => "э",
      "ehW" => "э",
      "ehw" => "э"
    }

    maps22 = %{"J" => "Ь", "j" => "ь", "J'" => "Ь", "j'" => "ь"}
    maps23 = %{"J" => "Ь", "j" => "ь", "J'" => "Ь", "j'" => "ь"}
    maps24 = %{"J" => "Ь", "j" => "ь", "J'" => "Ь", "j'" => "ь"}
    maps25 = %{"'J" => "Й", "'j" => "й", "'" => "’", "J" => "Й", "j" => "й"}

    tr2 = fn s, g1, g2, g3, g4, g5 ->
      cond do
        g1 != "" -> maps21[g1] || g1
        g2 != "" -> maps22[g2] || g2
        g3 != "" -> maps23[g3] || g3
        g4 != "" -> maps24[g4] || g4
        g5 != "" -> maps25[g5] || g5
        true -> s
      end
    end

    text
    |> String.normalize(:nfc)
    |> then(&Regex.replace(rx1, &1, tr1))
    |> then(&Regex.replace(rx2, &1, tr2))
    |> String.normalize(:nfc)
  end
end
